name: FREE_RDP

on:
  workflow_dispatch:

jobs:
  FREE_RDP:
    runs-on: windows-latest
    timeout-minutes: 3600
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Tailscale (via Chocolatey)
        shell: pwsh
        run: |
          # Install Chocolatey if missing
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          }
          choco install tailscale --yes --no-progress
          $tailscaleExe = "C:\Program Files\Tailscale\tailscale.exe"
          if (Test-Path $tailscaleExe) {
            Write-Host "‚úÖ Found Tailscale executable at: $tailscaleExe"
            Add-Content -Path $env:GITHUB_ENV -Value "TAILSCALE_EXE=$tailscaleExe"
          } else {
            Write-Error "‚ùå Tailscale executable not found at: $tailscaleExe"
            exit 1
          }

          if (Get-Service -Name tailscaled -ErrorAction SilentlyContinue) {
            Start-Service tailscaled
            Write-Host "‚úÖ tailscaled service started (Linux)."
          } elseif (Get-Service -Name Tailscale -ErrorAction SilentlyContinue) {
            Start-Service Tailscale
            Write-Host "‚úÖ Tailscale service started (Windows)."
          } else {
            Write-Host "‚ö†Ô∏è No Tailscale service found; continuing..."
          }

      - name: Install Additional SW
        shell: pwsh
        run: |
          Write-Host "üß© Installing additional software (MobaXterm, 7zip, Notepad++)..."
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Write-Host "‚öôÔ∏è Installing Chocolatey..."
            Set-ExecutionPolicy Bypass -Scope Process -Force
            iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          }
          choco install mobaxterm 7zip notepadplusplus --yes --no-progress
          Write-Host "‚úÖ Additional software installed."

      - name: Start and authenticate Tailscale
        shell: pwsh
        env:
          TAILSCALE_AUTHKEY: ${{ secrets.TAILSCALE_AUTHKEY }}
        run: |
          Start-Sleep -Seconds 3
          if (-not $env:TAILSCALE_AUTHKEY) {
            Write-Error "TAILSCALE_AUTHKEY secret is not set. Exiting."
            exit 1
          }

          Write-Host "üîπ Running Tailscale up..."
          & "$env:TAILSCALE_EXE" up --authkey=$env:TAILSCALE_AUTHKEY || (Write-Host "tailscale up returned non-zero code; continuing")
          Write-Host "üîç Checking Tailscale status..."
          Start-Sleep -Seconds 5
          & "$env:TAILSCALE_EXE" status

          $retries = 0
          $tsIP = ""
          while ($retries -lt 30 -and -not $tsIP) {
            Start-Sleep -Seconds 4
            $tsIP = (& "$env:TAILSCALE_EXE" ip -4 2>$null) -join "n"
            $retries++
          }
          if (-not $tsIP) {
            Write-Error "Tailscale IP not assigned. Exiting."
            exit 1
          }
          Write-Host "Tailscale IP detected: $tsIP"
          Add-Content -Path $env:GITHUB_ENV -Value "TAILSCALE_IP=$tsIP"

      - name: Configure Network (Disable IPv6)
        shell: pwsh
        run: |
          Write-Host "üåê Disabling IPv6 on all network interfaces..."
          Get-NetAdapter | ForEach-Object {
            Disable-NetAdapterBinding -Name $_.Name -ComponentID ms_tcpip6 -ErrorAction SilentlyContinue
          }
          Write-Host "‚úÖ IPv6 disabled on all adapters."

      - name: Configure Core RDP Settings
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

          netsh advfirewall firewall delete rule name="RDP-Tailscale" || Write-Host "No existing firewall rule to delete."
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        shell: pwsh
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
            Upper = [char[]](65..90)
            Lower = [char[]](97..122)
            Number = [char[]](48..57)
            Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $Password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $Password -AsPlainText -Force

          $username = "RDPUser"
          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
            Remove-LocalUser -Name $username -ErrorAction SilentlyContinue
          }
          New-LocalUser -Name $username -Password $securePass -FullName "RDP User" -Description "Auto-created RDP user" -PasswordNeverExpires:$true
          Add-LocalGroupMember -Group "Administrators" -Member $username
          Add-Content -Path $env:GITHUB_ENV -Value ("RDP_CREDS=" + $Password)

      - name: Verify RDP Accessibility
        shell: pwsh
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
            Write-Error "TCP connection to RDP port 3389 failed"
            exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Install & Setup AnyDesk (Unattended)
        shell: pwsh
        run: |
          # --- Variables ---
          $anydeskUrl = "https://download.anydesk.com/AnyDesk.exe"
          $installDir = "C:\Program Files (x86)\AnyDesk"      # target install folder
          $tempInstaller = "$env:TEMP\AnyDesk_Install.exe"

          # Download AnyDesk installer
          Write-Host "‚¨áÔ∏è Downloading AnyDesk installer..."
          Invoke-WebRequest -Uri $anydeskUrl -OutFile $tempInstaller -UseBasicParsing

          # Install AnyDesk (silent) to chosen folder, start with Windows, create shortcuts
          Write-Host "‚öôÔ∏è Installing AnyDesk to $installDir ..."
          Start-Process -FilePath $tempInstaller -ArgumentList "--install `"$installDir`" --start-with-win --silent --create-shortcuts --create-desktop-icon" -NoNewWindow -Wait

          # Determine actual executable path (two common paths)
          $anydeskExeCandidates = @(
            "$installDir\AnyDesk.exe",
            "C:\Program Files\AnyDesk\AnyDesk.exe",
            "C:\Program Files (x86)\AnyDesk\AnyDesk.exe"
          )
          $anydeskExe = $anydeskExeCandidates | Where-Object { Test-Path $_ } | Select-Object -First 1

          if (-not $anydeskExe) {
            Write-Error "‚ùå AnyDesk executable not found after install. Check installer output."
            exit 1
          }
          Write-Host "‚úÖ AnyDesk installed at: $anydeskExe"

          # Optional: register license if secret exists (do NOT echo the license in logs)
          #if ($env:ANYDESK_LICENSE) {
          #  Write-Host "üîê Registering AnyDesk license (from secret)..."
            # Use pipeline to send license to the CLI; avoid printing the license itself
          #  $env:ANYDESK_LICENSE | & "$anydeskExe" --register-licence
          #  if ($LASTEXITCODE -ne 0) { Write-Host "‚ö†Ô∏è License registration command returned non-zero (check license or permissions)." }
          #  Start-Sleep -Seconds 2
          #}

          # Ensure the service is started (install should create service)
          Write-Host "üöÄ Ensuring AnyDesk service is running..."
          # try CLI start-service, then fallback to Windows service control
          try {
            & "$anydeskExe" --start-service 2>$null
          } catch {}
            Start-Sleep -Seconds 3
            if ((Get-Service -Name AnyDesk -ErrorAction SilentlyContinue).Status -ne "Running") {
            try { Start-Service -Name AnyDesk -ErrorAction SilentlyContinue } catch {}
          }
          Start-Sleep -Seconds 3

          # Set unattended password (use RDP_CREDS stored in GITHUB_ENV earlier)
          if (-not $env:RDP_CREDS) {
            Write-Error "Missing RDP_CREDS environment variable. Cannot set unattended password."
          } else {
            Write-Host "üîê Setting unattended password (from RDP_CREDS)..."
            # Send password via pipeline to the CLI; this avoids exposing password as argument
            $env:RDP_CREDS | & "$anydeskExe" --set-password
            if ($LASTEXITCODE -ne 0) {
              Write-Host "‚ö†Ô∏è --set-password returned non-zero. Check AnyDesk version / permissions."
            } else {
              Write-Host "‚úÖ Unattended password set."
            }
          }

          # Get AnyDesk ID and status
          Write-Host "üîé Retrieving AnyDesk ID and status..."
          $anydeskId = (& "$anydeskExe" --get-id 2>$null | Out-String).Trim()
          $status = (& "$anydeskExe" --get-status 2>$null | Out-String).Trim()

          if (-not $anydeskId) {
            Write-Error "‚ùå Failed to read AnyDesk ID (service may not be running or CLI not supported)."
            exit 1
          }
          Write-Host "`n=== ANYDESK ACCESS ==="
          Write-Host "ID: $anydeskId"
          Write-Host "Status: $status"
          Write-Host "Password: $env:RDP_CREDS"
          Write-Host "========================`n"

      - name: Maintain Connection
        shell: pwsh
        run: |
          Write-Host "n=== RDP ACCESS ==="
          Write-Host "http://cheap-rdp.net"
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDPUser"
          Write-Host "Password: $env:RDP_CREDS"
          Write-Host "==============n"
          while ($true) {
            Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
            Start-Sleep -Seconds 300
          }
