name: RDP_TIPSUNIX

on:
  workflow_dispatch:

jobs:
  tipsunix-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Tailscale (via Chocolatey)
        shell: pwsh
        run: |
          # Install Chocolatey if missing (simple check)
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          }
          choco install tailscale -y
          $tailscaleExe = "C:\Program Files\Tailscale\tailscale.exe"
          if (Test-Path $tailscaleExe) {
            Write-Host "✅ Found Tailscale executable at: $tailscaleExe"
            Add-Content -Path $env:GITHUB_ENV -Value "TAILSCALE_EXE=$tailscaleExe"
          } else {
            Write-Error "❌ Tailscale executable not found at: $tailscaleExe"
            exit 1
          }


          # Try to start tailscaled (Linux) or Tailscale (Windows)
          if (Get-Service -Name tailscaled -ErrorAction SilentlyContinue) {
            Start-Service tailscaled
            Write-Host "✅ tailscaled service started (Linux)."
          } elseif (Get-Service -Name Tailscale -ErrorAction SilentlyContinue) {
            Start-Service Tailscale
            Write-Host "✅ Tailscale service started (Windows)."
          } else {
            Write-Host "⚠️ No Tailscale service found; continuing..."
          }

      - name: Start and authenticate Tailscale
        shell: pwsh
        env:
          TAILSCALE_AUTHKEY: ${{ secrets.TAILSCALE_AUTHKEY }}
        run: |
          # Use authkey from secrets to authenticate in headless mode
          # Note: You must create an auth key in your Tailscale admin console and store it in repo secrets.
          # & tailscaled --tun=userspace-networking -state="C:\tailscale\tailscaled.state" --verbose &
          Start-Sleep -Seconds 3
          if (-not $env:TAILSCALE_AUTHKEY) {
            Write-Error "TAILSCALE_AUTHKEY secret is not set. Exiting."
            exit 1
          }
          # tailscale up with authkey (may require admin)
          Start-Process -FilePath $env:TAILSCALE_EXE -ArgumentList @("up", "--authkey", $env:TAILSCALE_AUTHKEY, "--hostname", "GH-Actions-RDP", "--accept-routes") -Wait
          # & $tailscaleExe up --authkey=$env:TAILSCALE_AUTHKEY || (Write-Host "tailscale up returned non-zero code; continuing to attempt to get IP")
          # Wait for Tailscale IP to appear (loop with timeout)
          $retries = 0
          $tsIP = ""
          while ($retries -lt 30 -and -not $tsIP) {
            Start-Sleep -Seconds 2
            $tsIP = (& $tailscaleExe ip -4 2>$null) -join "`n"
            $retries++
          }

          if (-not $tsIP) {
            Write-Error "Tailscale IP not assigned. Exiting."
            exit 1
          }
          Write-Host "Tailscale IP detected: $tsIP"
          # Export to GITHUB_ENV for later steps
          Add-Content -Path $env:GITHUB_ENV -Value "TAILSCALE_IP=$tsIP"

      - name: Configure Core RDP Settings
        shell: pwsh
        run: |
          # Enable Remote Desktop and disable Network Level Authentication (if needed)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
            -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
            -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
            -Name "SecurityLayer" -Value 0 -Force

          # Remove any existing rule with the same name to avoid duplication
          netsh advfirewall firewall delete rule name="RDP-Tailscale" || Write-Host "No existing firewall rule to delete."

          # For testing, allow any incoming connection on port 3389
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          # (Optional) Restart the Remote Desktop service to ensure changes take effect
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        shell: pwsh
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
            Upper = [char[]](65..90)    # A-Z
            Lower = [char[]](97..122)   # a-z
            Number = [char[]](48..57)   # 0-9
            Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126)) # Special characters
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $Password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $Password -AsPlainText -Force

          $username = "RDPUser"
          # Remove user if already present (to avoid duplicates)
          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
            Remove-LocalUser -Name $username -ErrorAction SilentlyContinue
          }

          # Create local user
          New-LocalUser -Name $username -Password $securePass -FullName "RDP User" -Description "Auto-created RDP user" -PasswordNeverExpires:$true

          # Add to Administrators group so RDP session is allowed (adjust as needed for security)
          Add-LocalGroupMember -Group "Administrators" -Member $username

          # Export plaintext password to GITHUB_ENV so we can display it in Maintain step (BE CAREFUL: this exposes secret in workflow logs)
          Add-Content -Path $env:GITHUB_ENV -Value ("RDP_CREDS=" + $Password)

      - name: Verify RDP Accessibility
        shell: pwsh
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"

          # Test connectivity using Test-NetConnection against the Tailscale IP on port 3389
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
            Write-Error "TCP connection to RDP port 3389 failed"
            exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection
        shell: pwsh
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "http://www.youtube.com/@TipsUNIX"
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDPUser"
          Write-Host "Password: $env:RDP_CREDS"
          Write-Host "==============`n"

          # Keep runner active indefinitely (or until manually cancelled)
          while ($true) {
            Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
            Start-Sleep -Seconds 300
          }
